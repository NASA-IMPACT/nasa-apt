AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for nasa-apt.
Parameters:
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter, contain only
      alphanumeric characters, and length 1 to 64.
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter, contain only
      alphanumeric characters, and length 1 to 16.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters and length 8 to 41.
  PostgrestContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  PostgrestContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  PostgRESTPATH:
    Type: String
    Default: "/*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  PostgRESTPriority:
    Type: Number
    Default: 3
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which are
      assigned to different paths on the load balancer.
  FastapiContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  FastapiContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  FastapiPATH:
    Type: String
    Default: "/fastapi/*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  FastapiAPIPrefix:
    Type: String
    Default: "/fastapi/"
    Description: API prefix as used by FastAPI in PDF service (must be consistent with PDFPATH)
  FastapiPriority:
    Type: Number
    Default: 2
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which are
                 assigned to different paths on the load balancer.
  PostgRESTAPIPrefix:
    Type: String
    Default: "/"
    Description: API prefix as used by PostGrest
  PDFsBucketName:
    Type: String
    Default: pdfs
    Description: Bucket for output PDFs of ATBDs.
  FiguresBucketName:
    Type: String
    Default: figures
    Description: Bucket for storing ATBD figures.
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '6'
    Description: Maximum number of EC2 instances that can be launched.
  ECSAMI:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-0bc08634af113cccb
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
    ConstraintDescription: Please choose a valid instance type.
  JWTSecret:
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    Default: lkjlkjslkdjaflkjfsalkjfasdlkfdlkjlkjslkdjaflkjfsalkjfasdlkfdlkjlkjslkdjaflkjfsalkjfasdlkfd
    Description: Secret to use for creating JWT Tokens
  APTFrontendUrl:
    Type: String
    Description: Frontend Url used to set CORS origin for FastAPI
  IDPMetadataUrl:
    Type: String
    Description: Url for SAML IDP metadata
  FastapiHost:
    Type: String
    Description: Url for FastApi
  RestApiEndpoint:
    Type: String
    Description: Url for FastApi
Conditions:
  HasFastapiHost: !Not [!Or [!Equals [!Ref 'FastapiHost', ''], !Equals [!Ref 'FastapiHost', 'http://localhost:8000']]]
  HasRestApiEndpoint: !Not [!Or [!Equals [!Ref 'RestApiEndpoint', ''], !Equals [!Ref 'RestApiEndpoint', 'http://rest-api:3000']]]
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'rds-subnet'
      SubnetIds:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  # Allows access from ECS to RDS
  # RDS Resources
  DB:
    Type: AWS::RDS::DBInstance
    DependsOn: GatewayAttachement
    Properties:
      DBName: !Sub '${DBName}'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      Engine: Postgres
      EngineVersion: '11.1'
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !Ref FargateContainerSecurityGroup
  Elasticsearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub '${AWS::StackName}-elastic'
      ElasticsearchVersion: "7.7"
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: "t2.small.elasticsearch"
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-elastic/*"
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other members of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from
  # the public internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via
        # the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']


  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'dummyTarget']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  PostgRESTTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'postgrest'
      Cpu: !Ref 'PostgrestContainerCpu'
      Memory: !Ref 'PostgrestContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-ctr-pgr'
          Cpu: !Ref 'PostgrestContainerCpu'
          Memory: !Ref 'PostgrestContainerMemory'
          Image: postgrest/postgrest:v6.0.2
          PortMappings:
            - ContainerPort: 3000
          Environment:
            -
              Name: PGRST_DB_URI
              Value: !Join ['', ['postgres://', 'masteruser', ':',
                                 !Ref 'DBPassword', '@',
                                 !GetAtt [DB, Endpoint.Address],
                                 ':', !GetAtt [DB, Endpoint.Port], /,
                                 !Ref 'DBName']]
            -
              Name: PGRST_DB_SCHEMA
              Value: apt
            -
              Name: PGRST_JWT_SECRET
              Value: !Ref 'JWTSecret'
            -
              Name: PGRST_DB_ANON_ROLE
              Value: anonymous
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              'awslogs-group': !Ref 'LogGroup'
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-stream-prefix': 'postgres-task'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  PostgRESTService:
    Type: AWS::ECS::Service
    DependsOn: PostgRESTLoadBalancerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}-svc-pgr'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
      TaskDefinition: !Ref 'PostgRESTTaskDefinition'
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-ctr-pgr'
          ContainerPort: 3000
          TargetGroupArn: !Ref 'PostgRESTTargetGroup'

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  FastapiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 'fastapi'
      Cpu: !Ref 'FastapiContainerCpu'
      Memory: !Ref 'FastapiContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !GetAtt FastapiTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-ctr-fastapi'
          Cpu: !Ref 'FastapiContainerCpu'
          Memory: !Ref 'FastapiContainerMemory'
          Image: 552819999234.dkr.ecr.us-east-1.amazonaws.com/nasa-apt/saml/fastapi:latest
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: API_PREFIX
              Value: !Ref 'FastapiAPIPrefix'
            - Name: REST_API_ENDPOINT
              Value: !If [HasRestApiEndpoint, !Ref 'RestApiEndpoint', !Join ['', ['http://', !GetAtt PublicLoadBalancer.DNSName]]]
            - Name: S3_ENDPOINT
              Value: 'http://s3.amazonaws.com'
            - Name: PDFS_S3_BUCKET
              Value: !Ref 'PDFsBucket'
            - Name: FIGURES_S3_BUCKET
              Value: !Ref 'FiguresBucket'
            - Name: DBURL
              Value: !Join ['', ['postgres://', 'masteruser', ':',
                                  !Ref 'DBPassword', '@',
                                  !GetAtt [DB, Endpoint.Address],
                                  ':', !GetAtt [DB, Endpoint.Port], /,
                                  !Ref 'DBName']]
            - Name: ELASTICURL
              Value: !Join ['', ['https://', !GetAtt [Elasticsearch, DomainEndpoint]]]
            - Name: APT_FRONTEND_URL
              Value: !Ref 'APTFrontendUrl'
            - Name: IDP_METADATA_URL
              Value: !Ref 'IDPMetadataUrl'
            - Name: FASTAPI_HOST
              Value: !If [HasFastapiHost, !Ref 'FastapiHost', !Join ['', ['http://', !GetAtt PublicLoadBalancer.DNSName]]]
            - Name: JWT_SECRET
              Value: !Ref 'JWTSecret'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              'awslogs-group': !Ref 'LogGroup'
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-stream-prefix': 'fastapi-task'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  FastapiService:
    Type: AWS::ECS::Service
    DependsOn: FastapiLoadBalancerRule
    Properties:
      ServiceName: !Sub '${AWS::StackName}-svc-fastapi'
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
      TaskDefinition: !Ref 'FastapiTaskDefinition'
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-ctr-fastapi'
          ContainerPort: 80
          TargetGroupArn: !Ref 'FastapiTargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  PostgRESTTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: !Ref 'PostgRESTAPIPrefix'
      Matcher:
        # if the database has not been migrated yet, then http 400 is expected
        HttpCode: '200,400'
      TargetType: ip
      Name: !Sub '${AWS::StackName}-tg-pgr'
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  FastapiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: !Ref 'FastapiAPIPrefix'
      Matcher:
        HttpCode: '200'
      HealthCheckProtocol: HTTP
      TargetType: ip
      Name: !Sub '${AWS::StackName}-tg-fastapi'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC

  # Create a rule on the load balancer for routing traffic to the target group
  AuthLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'FastapiTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /saml/*
      Priority: 1
      ListenerArn: !Ref PublicLoadBalancerListener

  PostgRESTLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'PostgRESTTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'PostgRESTPATH']
      Priority: !Ref 'PostgRESTPriority'
      ListenerArn: !Ref PublicLoadBalancerListener

  FastapiLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'FastapiTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values: [!Ref 'FastapiPATH']
      Priority: !Ref 'FastapiPriority'
      ListenerArn: !Ref PublicLoadBalancerListener

  # Figures bucket
  FiguresBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref 'AWS::StackName', '-', !Ref 'FiguresBucketName']]
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'

  # Figures bucket policy
  FiguresBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join ['', [!Ref 'AWS::StackName', '-', !Ref 'FiguresBucketName']]
      PolicyDocument:
        Statement:
          Action:
            - 's3:List*'
            - 's3:Get*'
            - 's3:PutObject'
            - 's3:PutObjectAcl'
          Effect: Allow
          Principal:
            AWS:
              - '*'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWS::StackName', '-', !Ref 'FiguresBucketName', '/*']]

  PDFsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref 'AWS::StackName', '-', !Ref 'PDFsBucketName']]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'

  PDFsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join ['', [!Ref 'AWS::StackName', '-', !Ref 'PDFsBucketName']]
      PolicyDocument:
        Statement:
          Action:
            - 's3:List*'
            - 's3:Get*'
          Effect: Allow
          Principal:
            AWS:
              - '*'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWS::StackName', '-', !Ref 'PDFsBucketName', '/*']]


  # IAM role for pdf task to have permission on the pdf cache bucket.
  FastapiTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: s3Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['s3:Put*', 's3:List*', 's3:Get*']
                Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWS::StackName', '-', !Ref 'PDFsBucketName', '/*']]
        - PolicyName: elasticsearchPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['es:*']
                Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-elastic/*"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['ecs/', !Ref 'AWS::StackName', '/tasks']]

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'FargateContainerSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_IMAGE_PULL_BEHAVIOR=prefer-cached >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \
            --resource ECSAutoScalingGroup --region ${AWS::Region}
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: '*'
Outputs:
  S3Endpoint:
    Value: 'http://s3.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-S3Endpoint'
  PDFsBucket:
    Value: !Join ['', [!Ref 'AWS::StackName', '-', !Ref 'PDFsBucketName']]
    Export:
      Name: !Sub '${AWS::StackName}-AtbdBucket'
  FiguresBucket:
    Value: !Join ['', [!Ref 'AWS::StackName', '-', !Ref 'FiguresBucketName']]
    Export:
      Name: !Sub '${AWS::StackName}-FiguresBucket'
  PGConnection:
    Value: !Join ['', ['postgres://', 'masteruser', ':',
                       !Ref 'DBPassword', '@',
                       !GetAtt [DB, Endpoint.Address],
                       ':', !GetAtt [DB, Endpoint.Port], /,
                       !Ref 'DBName']]
    Export:
      Name: !Sub '${AWS::StackName}-PGConnection'
  APIEndpoint:
    Value: !Join ['', ['http://', !GetAtt PublicLoadBalancer.DNSName]]
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'
  FastapiEndpoint:
    Value: !Join ['', ['http://', !GetAtt PublicLoadBalancer.DNSName, !Ref 'FastapiAPIPrefix']]
    Export:
      Name: !Sub '${AWS::StackName}-FastapiEndpoint'


  DBURL:
    Value: !Join ['', ['postgres://', 'masteruser', ':',
                        !Ref 'DBPassword', '@',
                        !GetAtt [DB, Endpoint.Address],
                        ':', !GetAtt [DB, Endpoint.Port], /,
                        !Ref 'DBName']]
    Export:
      Name: !Sub '${AWS::StackName}-DBURL'
  ELASTICURL:
    Value: !Join ['', ['https://', !GetAtt [Elasticsearch, DomainEndpoint], ':9200']]
    Export:
      Name: !Sub '${AWS::StackName}-ELASTICURL'
